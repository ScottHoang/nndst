import collections
import os
import os.path as osp
import sys
from typing import Any
from typing import List
from typing import Optional

import pandas as pd
import torch
import torch_geometric as pyg
from scores import pair_layers
from scores import ramanujan_score
from tqdm import tqdm


def save(item: pd.DataFrame, dst: Optional[str], name: str):
    """
    save pandas df to csv file under name
    """
    if dst is not None:
        os.makedirs(dst, exist_ok=True)
        item = item.sort_values(by=['mask_no'])
        item.to_csv(osp.join(dst, name + '.csv'), index=False)


def get_summary_view(layers: pd.DataFrame) -> pd.DataFrame:
    """
    summarize the overall score of the entire masks by avg the values of each layer
    """
    summary = collections.defaultdict(list)
    for mask in layers.mask_no.unique():
        tab = layers.loc[layers.mask_no == mask]
        tab = tab.drop(columns=['layer'])
        summary['mask_no'].append(mask)
        for k in tab.keys():
            if k == 'mask_no':
                continue
            summary[k].append(tab[k].mean())

    return pd.DataFrame.from_dict(summary)


def generate_csv(graphs_dir: str,
                 performances_dir: str,
                 dst: Optional[str] = None) -> List[pd.DataFrame]:
    """
    generate pandas Dataframe structure.
    params:
        graphs_dir: the directory contains graph:dict generated by generate_bipartie_graphs.py
        performances_dir: the directory contains csv files of mask's performance generated by
        train_mask_dst.py
    """
    layers_df = collections.defaultdict(list)
    for mask in tqdm(os.listdir(graphs_dir),
                     desc=graphs_dir,
                     total=len(os.listdir(graphs_dir))):
        csv = pd.read_csv(osp.join(performances_dir, mask + ".csv"))
        graphs = torch.load(osp.join(graphs_dir, mask))
        pairs = pair_layers(list(graphs.items()))
        for i, (layer, info) in enumerate(graphs.items()):
            if 'ram_scores' in info:
                (s_m, r_m, t1m), (s_w, r_w, t1w) = info['ram_scores']
            else:
                (s_m, r_m, t1m), (s_w, r_w, t1w) = ramanujan_score(info)

            layers_df['mask_no'].append(int(mask.split('.')[0].split('_')[0]))
            layers_df['layer'].append(layer)
            layers_df['sparsity'].append(info['sparsity'])
            layers_df['sm'].append(s_m)
            layers_df['rm'].append(r_m)
            layers_df['sw'].append(s_w)
            layers_df['rw'].append(r_w)
            layers_df['t1m'].append(t1m)
            layers_df['t1w'].append(t1w)
            layers_df['perf'].append(csv.val_acc.max())
            if i < len(pairs):  # prevent last pairs
                nxt = pairs[i][-1][0]

                layers_df['copeland_score'].append(
                    info.get(f"{nxt}_copeland_score", 0))
                layers_df['compatibility'].append(
                    info.get(f"{nxt}_comatibility", 0))
                layers_df['overlap_coefs'].append(info.get('overlap_coefs', 0))
            else:
                layers_df['copeland_score'].append(0)
                layers_df['compatibility'].append(0)
                layers_df['overlap_coefs'].append(0)
    name = graphs_dir.split('/')[-2]
    layers_df = pd.DataFrame.from_dict(layers_df)
    summary_df = get_summary_view(layers_df)
    save(summary_df, dst, name + '_summary')
    save(layers_df, dst, name)
    return layers_df, summary_df


if __name__ == "__main__":
    _, graphs_directory, performances_directory, destination = sys.argv
    generate_csv(graphs_directory, performances_directory, destination)
