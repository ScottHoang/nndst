from matplotlib.pyplot import legend
import networkx as nx
import networkx
import numpy as np
import matplotlib.pyplot as plt

sparsity_list=[1.0,0.79999336,0.63999099,0.51198615,0.40958523,0.32766449,
0.26212642,0.20969671,0.16775072,0.13419541,0.10735116,0.08587428,0.06869426,
0.05495098,0.04395414,0.0351574,0.02812149,0.02249203,0.01798845,0.01438559,0.01150257]
sparsity_array=1-np.array(sparsity_list)
lth_loss=[0.430712,0.4307,0.443161,0.513773,0.677376,0.929538,
1.236265,1.624431,1.977417,2.393517,2.705353,2.961182,2.92104,
3.402416,3.131253,2.867699,2.832504,2.620735,2.714465,2.845261,2.836301]
pruned_loss=[0.430712,0.446758,0.525707,0.513096,0.522238,0.449806,
0.442124,0.424414,0.526918,0.497272,0.454648,0.523374,0.526602,
0.621186,0.566703,0.62605,0.712205,0.653673,0.765829,0.790111,0.852666]
lth_acc=[88.98,89.02,88.84,86.94,82.69,76.97,70.31,60.27,50.70,38.41,
28.78,19.73,17.34,13.96,11.60,12.10,11.63,11.96,10.01,9.40,9.11]
pruned_acc=[88.98,88.64,85.84,86.02,85.79,87.06,86.92,87.19,83.72,83.58,
85.20,83.32,82.68,79.05,80.70,78.58,75.75,77.59,73.48,72.61,70.13]
legend=['winning ticktes','weight prunning']
pruned_ep0=np.array([[0.008024309933726614, 0.008024309933726614, 0.0036156223871475716], [0.00846629736955576, 0.00846629736955576, 0.0036896505305544247], 
[0.00839283801136052, 0.00839283801136052, 0.003670186961721081], [0.008119152978347456, 0.008119152978347456, 0.00367399350914156], 
[0.007799740320085029, 0.007799740320085029, 0.003685221169011232], [0.007501161235586365, 0.007501161235586365, 0.003703850081082768], 
[0.007257863680703767, 0.007257863680703767, 0.0037303899917063552], [0.0070362780131783065, 0.0070362780131783065, 0.0037646489184903673], 
[0.006884075263079649, 0.006884075263079649, 0.0038027474931071705], [0.006807678865495926, 0.006807678865495926, 0.003844645995061942], 
[0.006920443550070808, 0.006920443550070808, 0.0038857302268728755], [0.006697541288493399, 0.006697541288493399, 0.003931766280371612], 
[0.006906216929778934, 0.006906216929778934, 0.003970656830594439], [0.0072970535620938085, 0.0072970535620938085, 0.004009568481783115], 
[0.00754692590005554, 0.00754692590005554, 0.004060810130080886], [0.007496930575700985, 0.007496930575700985, 0.004102571635862691], 
[0.006886099819879374, 0.006886099819879374, 0.0041699678363408274], [0.0071615530695925056, 0.0071615530695925056, 0.004264171279760843], 
[0.006696633807463126, 0.006696633807463126, 0.004367201961515794], [0.006434712137949483, 0.006434712137949483, 0.0044893742296117055], 
[0.007102839230387931, 0.007102839230387931, 0.004583219458679114]])
lth_ep0=np.array([[0.02143958840779673, 0.02143958840779673, 0.0035849504081038046], [0.020656827825684454, 0.020656827825684454, 0.003686862949463869], 
[0.01861647308721361, 0.01861647308721361, 0.0037853944288580763], [0.016564489754749015, 0.016564489754749015, 0.0038285119335560247], 
[0.015770929661051244, 0.015770929661051244, 0.0038643034602555927], [0.013711539179534049, 0.013711539179534049, 0.0038961513451915104], 
[0.01221546595938011, 0.01221546595938011, 0.003943030794754158], [0.012840497946293095, 0.012840497946293095, 0.004001592601021811], 
[0.011055556431891588, 0.011055556431891588, 0.004050956067399245], [0.009436499474286795, 0.009436499474286795, 0.004117556134170242], 
[0.008506064517425919, 0.008506064517425919, 0.004179941845561146], [0.007339080158070774, 0.007339080158070774, 0.00426127165290594],
[0.006534091796729477, 0.006534091796729477, 0.0043510996123221155], [0.006849008926190842, 0.006849008926190842, 0.004428735746702101], 
[0.007260337997078133, 0.007260337997078133, 0.004562056262320741], [0.006669012691205482, 0.006669012691205482, 0.004713563555935772],
[0.0057065666894019216, 0.0057065666894019216, 0.004873335165723389], [0.004126066589051355, 0.004126066589051355, 0.005057080938053509], 
[0.00502090973104197, 0.00502090973104197, 0.005254879203193814], [0.0049642843665722355, 0.0049642843665722355, 0.005513776828581322], 
[0.0054391070734604065, 0.0054391070734604065, 0.005707472367641837]])
pruned_ep160=np.array([[0.008024309933726614, 0.008024309933726614, 0.0036156223871475716], [0.00846629736955576, 0.00846629736955576, 0.0036896505305544247], 
[0.00839283801136052, 0.00839283801136052, 0.003670186961721081], [0.008119152978347456, 0.008119152978347456, 0.00367399350914156], 
[0.007799740320085029, 0.007799740320085029, 0.003685221169011232], [0.007501161235586365, 0.007501161235586365, 0.003703850081082768], 
[0.007257863680703767, 0.007257863680703767, 0.0037303899917063552], [0.0070362780131783065, 0.0070362780131783065, 0.0037646489184903673], 
[0.006884075263079649, 0.006884075263079649, 0.0038027474931071705], [0.006807678865495926, 0.006807678865495926, 0.003844645995061942], 
[0.006920443550070808, 0.006920443550070808, 0.0038857302268728755], [0.006697541288493399, 0.006697541288493399, 0.003931766280371612], 
[0.006906216929778934, 0.006906216929778934, 0.003970656830594439], [0.0072970535620938085, 0.0072970535620938085, 0.004009568481783115], 
[0.00754692590005554, 0.00754692590005554, 0.004060810130080886], [0.007496930575700985, 0.007496930575700985, 0.004102571635862691], 
[0.006886099819879374, 0.006886099819879374, 0.0041699678363408274], [0.0071615530695925056, 0.0071615530695925056, 0.004264171279760843], 
[0.006696633807463126, 0.006696633807463126, 0.004367201961515794], [0.006434712137949483, 0.006434712137949483, 0.0044893742296117055], 
[0.007102839230387931, 0.007102839230387931, 0.004583219458679114]])
lth_ep160=np.array([[0.008024309933726614, 0.008024309933726614, 0.0036156223871475716], [0.009223379907822328, 0.009223379907822328, 0.003692629041295563], 
[0.008869209791292082, 0.008869209791292082, 0.003789014395026076], [0.007063894261696131, 0.007063894261696131, 0.0038308994665811977], 
[0.0065615293020656615, 0.0065615293020656615, 0.0038643034602555927], [0.0061667007567432165, 0.0061667007567432165, 0.003898376839204063], 
[0.004885047297749185, 0.004885047297749185, 0.0039533394878298635], [0.004987181023431651, 0.004987181023431651, 0.004001592601021811], 
[0.00441903518159913, 0.00441903518159913, 0.004054742791737801], [0.00411684117383627, 0.00411684117383627, 0.004117556134170242], 
[0.003611802683408923, 0.003611802683408923, 0.004183191975566351], [0.0032667341249932166, 0.0032667341249932166, 0.00426127165290594], 
[0.003240309469472994, 0.003240309469472994, 0.004356067007839711], [0.004361110055799645, 0.004361110055799645, 0.0044338426390661614], 
[0.004213787476376898, 0.004213787476376898, 0.004562056262320741], [0.005945359625692766, 0.005945359625692766, 0.004713563555935772], 
[0.005314688877966959, 0.005314688877966959, 0.004873454008039508], [0.0051483835709328915, 0.0051483835709328915, 0.005057403945219212], 
[0.004225352388907592, 0.004225352388907592, 0.005255126147260975], [0.004860636242910476, 0.004860636242910476, 0.005513776828581322], 
[0.005035714162489831, 0.005035714162489831, 0.005707717875591649]])
'''
plt.figure(1)
plt.plot(sparsity_array,pruned_acc,'-*')
plt.plot(sparsity_array,lth_acc,'-s')
plt.legend(legend)
plt.xlabel('sparsity')
plt.ylabel('Test accuracy')
plt.title('Test accuracy vs. Sparsity')
plt.savefig('acc.png',format='png')
plt.savefig('acc.svg',format='svg')

plt.show()
plt.close()
plt.figure(1)
plt.plot(sparsity_array,pruned_loss,'-*')
plt.plot(sparsity_array,lth_loss,'-s')
plt.legend(legend)
plt.xlabel('sparsity')
plt.ylabel('Test loss')
plt.title('Test loss vs. Sparsity')
plt.savefig('loss.png',format='png')
plt.savefig('loss.svg',format='svg')
plt.show()
plt.close()

plt.figure(1)
print(pruned_ep0.shape)
plt.plot(sparsity_array,lth_ep0[:,2],'-s')
plt.plot(sparsity_array,pruned_ep0[:,2],'-*')
plt.legend(legend)
plt.xlabel('sparsity')
plt.ylabel('Betweenness')
plt.title('Betweenness vs. Sparsity')
plt.savefig('ep0_between.png',format='png')
plt.savefig('ep0_between.svg',format='svg')
plt.show()
plt.close()

plt.figure(1)
print(pruned_ep0.shape)
plt.plot(sparsity_array,lth_ep160[:,2],'-s')
plt.plot(sparsity_array,pruned_ep160[:,2],'-*')
plt.legend(legend)
plt.xlabel('sparsity')
plt.ylabel('Betweenness')
plt.title('Betweenness vs. Sparsity')
plt.savefig('ep160_between.png',format='png')
plt.savefig('ep160_between.svg',format='svg')
plt.show()
plt.close()
#'''
def read_gexf(file_name):
    nx_new=networkx.Graph()
    for line in open(file_name,'r').readlines():
        if 'edge id=' in line:
            line_tmp=line.replace('"',' ')
            line_tmp=line_tmp.replace('  ',' ')
            line_tmp=line_tmp.replace('  ',' ')

            line_list=line_tmp.split(' ')
            if float(line_list[10])!=0:
                nx_new.add_weighted_edges_from([(int(line_list[6]),int(line_list[8]),float(line_list[10]))])

    return nx_new


def analyze_gexf(net, source=None, target=None):
    if source is not None and target is not None:
        node_betweeness = nx.betweenness_centrality_subset(net, source, target, weight='weight')
        edge_betweeness = nx.edge_betweenness_centrality_subset(net, source, target, weight='weight')
        closeness_centrality = None
    else:
        node_betweeness = nx.betweenness_centrality(net, weight='weight')
        edge_betweeness = nx.edge_betweenness_centrality(net, weight='weight')
        closeness_centrality = nx.closeness_centrality(net)  #,weight='weight')

    return dict(nb=node_betweeness, eb=edge_betweeness, cc=closeness_centrality)


def analyze_gexf_from_file(file_path, source=None, target=None):
    print(file_path)
    net=nx.read_gexf(file_path)

    if source is not None and target is not None:
        node_betweeness = nx.betweenness_centrality_subset(net, source, target, weight='weight')
        edge_betweeness = nx.edge_betweenness_centrality_subset(net, source, target, weight='weight')
        closeness_centrality = None
    else:
        node_betweeness = nx.betweenness_centrality(net, weight='weight')
        edge_betweeness = nx.edge_betweenness_centrality(net, weight='weight')
        closeness_centrality = nx.closeness_centrality(net)  #,weight='weight')

    return dict(nb=node_betweeness, eb=edge_betweeness, cc=closeness_centrality)


def scan_ckpt(sparsity_list,num_ckpt=21):
    pruned=[]
    lth=[]
    for idx in range(num_ckpt):
        # lth.append( analyze_gexf('ep0_{}_sparsity_{:.4f}.gexf'.format(idx,1-sparsity_list[idx])))
        pruned.append(analyze_gexf('pruned_{}_ep0_sparsity_{:.4f}.gexf'.format(idx,1-sparsity_list[idx])))
    print(pruned,file=open('pruned_ep0.logs','a+'))
    # print(lth,file=open('lth_ep0.logs','a+'))

    # pruned=np.array(pruned)
    # lth=np.array(lth)
    # plt.figure(1)
    # plt.plot(sparsity_list,pruned[0][:])
    # plt.plot(sparsity_list,lth[0][:])
    # plt.xlabel('sparsity')
    # plt.ylabel('avg path length')
    # plt.savefig('ep0_avg_path.png',format='png')
    # plt.show()
    # plt.close()
    # plt.figure(1)
    # plt.plot(sparsity_list,pruned[:][1])
    # plt.plot(sparsity_list,lth[:][1])
    # plt.xlabel('sparsity')
    # plt.ylabel('avg path length')
    # plt.savefig('ep0_avg_cc.png',format='png')
    # plt.show()
    # plt.close()

    pruned=[]
    lth=[]
    for idx in range(num_ckpt):
        lth.append( analyze_gexf('ep160_{}_sparsity_{:.4f}.gexf'.format(idx,1-sparsity_list[idx])))
        pruned.append(analyze_gexf('pruned_{}_ep160_sparsity_{:.4f}.gexf'.format(idx,1-sparsity_list[idx])))
    print(pruned,file=open('pruned_ep160.logs','a+'))
    print(lth,file=open('lth_ep160.logs','a+'))

    pruned=np.array(pruned)
    lth=np.array(lth)
    
    plt.figure(1)
    plt.plot(sparsity_list,pruned[0][:])
    plt.plot(sparsity_list,lth[0][:])
    plt.xlabel('sparsity')
    plt.ylabel('avg path length')
    plt.savefig('ep160_avg_path.png',format='png')
    plt.show()
    plt.close()
    plt.figure(1)
    plt.plot(sparsity_list,pruned[:][1])
    plt.plot(sparsity_list,lth[:][1])
    plt.xlabel('sparsity')
    plt.ylabel('avg path length')
    plt.savefig('ep160_avg_cc.png',format='png')
    plt.show()
    plt.close()


# scan_ckpt(sparsity_list)
